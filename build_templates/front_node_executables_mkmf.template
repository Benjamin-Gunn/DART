# template for PGI f90 Compiler on Cray clusters
#
# DART software - Copyright 2004 - 2013 UCAR. This open source software is
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# DART $Id: mkmf.template.pgi.cray 6675 2013-12-13 00:22:59Z nancy $

# typical use with mkmf
# mkmf -t mkmf.template.xxxx ...
#
# if you switch between machines frequently, you can leave
# the NETCDF variable unset here and set it in your environment.
#
# FFLAGS   useful for benchmarking
#    -Ktrap=fp               trap floating point exceptions and EXIT
#    -pc 64                  use 64bit register precision (useful for comparison)
#    -v                      verbose compile
#    -O0                     no optimization
#
# FFLAGS   useful for speed
#    -fastsse                'general optimal flags for SSE, SSE2 chipsets'
#    -Minline
#    -Knoieee                don't perform IEEE arithmetic (faster, see note)
#    -Minfo=loop,inline      emit info about loop optmztn and inlining to stderr
#
# FFLAGS   useful for non-conforming code
#    -Mr8                    promote all reals to real*8
#    -Mextend                Allow source lines up to 132 characters
#    -Mfixed                 Assume fixed-format source
#    -Mfree                  Assume free-format source
#    -Mbyteswapio            turn big_endian to little_endian or vice-versa
#
# NOTE: 'noieee' "... produces results that differ from the correctly rounded
#                     result by no more than 3 units in the last place."
#
# DIRECT ACCESS ... reclen ... should be in units of 'bytes'.
#                   If runtime environment parameter FTNOPT is set to "vaxio",
#                   the units are number of words.
#
# If you add the -Mprof=func flag to get profiling information, you must
# add it to both FFLAGS and LDFLAGS.
#
# IF YOU HAVE MORE CURRENT COMPILER INFORMATION, PLEASE SHARE IT WITH US.


#MPIFC = ftn
#MPILD = ftn
#FC = ftn
#LD = ftn

###MPIFC = crayftn
###MPILD = crayftn
###FC = crayftn
###LD = crayftn 

MPIFC = ifort
MPILD = ifort 
FC = ifort
LD = ifort

# DISCUSSION ABOUT NETCDF. DART works with both V3 and V4 flavors of netCDF.
# Some V4 installations also require the HDF5 libraries. Some don't.
# Some netCDF installations require both -lnetcdff and -lnetcdf, some only
# require -lnetcdf. The permutations make it difficult to cover the possible
# installations. Here are some candidates, you might just have to resort to
# trial and error:
# LIBS = -L$(NETCDF)/lib -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
# LIBS = -L$(NETCDF)/lib -lnetcdf           -lcurl -lhdf5_hl -lhdf5 -lz -lm
# LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf -lcurl -lhdf5_hl -lhdf5 -lz -lm
#
# If you get an error "ld: library not found for -lnetcdff" (note 2 f's),
# remove it from the LIBS line. The same is true for any library. If 'ld'
# does not complain - it worked.

# If your NETCDF environment variable is not set correctly,
# uncomment the following line and set value to where lib and include
# are found for the netcdf files that match this compiler.
#
# NETCDF = /opt/local
# use module show cray-netcdf to get the path
#NETCDF = CRAY_LD_LIBRARY_PATH /opt/cray/netcdf/4.3.2/CRAY/83/lib 


###NETCDF = /opt/cray/netcdf/4.3.2/INTEL/140/
##NETCDF = /opt/cray/netcdf/4.3.3.1/INTEL/14.0/
#NETCDF = /opt/cray/pe/netcdf/4.4.1.1.6/INTEL/16.0/

NETCDF = /opt/cray/pe/netcdf/default/INTEL/19.0/
# 4.6.1.3
# 4.6.3.2
# default
# #cray-netcdf/4.6.1.3                                  2020/01/16 11:07:57
# #cray-netcdf/4.6.3.2                      default     2020/01/16 11:30:14


#INCS = -I.
INCS = -I$(NETCDF)/include

#LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
#LIBS = -L$(NETCDF)/lib -lnetcdff_cray
LIBS = -L$(NETCDF)/lib -lnetcdff_intel -lnetcdf_intel
#LIBS = -L.

### -craype-verbose
#FFLAGS  = -O3 $(INCS)
#FCLAGS  = -O3 $(INCS)  -target-cpu=x86_64
#FCLAGS  = -O3 $(INCS)
# FFLAGS  = -O3 $(INCS) 
FFLAGS  = -O3 $(INCS) -convert big_endian

LDFLAGS = $(INCS) $(LIBS)
#FCLINKFLAGS = $(INCS) $(LIBS)

###INCS = -I$(NETCDF)/include
###LIBS = -L$(NETCDF)/lib -lnetcdff -lnetcdf
###FFLAGS  = -O $(INCS)
###LDFLAGS = $(INCS) $(LIBS)
###

# for development or debugging, use this for flags:
#FFLAGS = -g -Ktrap=fp -pc 64 $(INCS)

# <next few lines under version control, do not edit>
# $URL: https://proxy.subversion.ucar.edu/DAReS/DART/releases/Lanai/mkmf/mkmf.template.pgi.cray $
# $Revision: 6675 $
# $Date: 2013-12-13 03:22:59 +0300 (Fri, 13 Dec 2013) $

#NETCDF = CRAY_LD_LIBRARY_PATH /opt/cray/netcdf/4.3.2/CRAY/83/lib 
#
#ls /opt/cray/netcdf/4.3.2/CRAY/83/lib 
#libnetcdf.a
#libnetcdf.so
#libnetcdf_c++4.a
#libnetcdf_c++4.so
#libnetcdf_c++4_cray.a
#libnetcdf_c++4_cray.la
#libnetcdf_c++4_cray.so
#libnetcdf_c++4_cray.so.1
#libnetcdf_c++4_cray.so.1.0.2
#libnetcdf_cray.a
#libnetcdf_cray.la
#libnetcdf_cray.so
#libnetcdf_cray.so.7
#libnetcdf_cray.so.7.2.0
#libnetcdff.a
#libnetcdff.so
#libnetcdff_cray.a
#libnetcdff_cray.la
#libnetcdff_cray.so
#libnetcdff_cray.so.5
#libnetcdff_cray.so.5.3.1
#pkgconfig
