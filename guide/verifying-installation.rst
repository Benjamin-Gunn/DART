######################
Verifying installation
######################

.. note:: These verification steps require MATLAB®. `UCAR Member Institutions
          <https://www.ucar.edu/who-we-are/membership-governance/member-institutions>`_
          have access to institutional licenses for MATLAB, thus we have
          created verification tools using it.

The Lorenz model is notoriously sensitive to very small changes; in
fact, the story of Lorenz discovering this sensitivity is a classic in
the annals of the study of chaos, which in turn was instrumental in the
development of data assimilation as a field of study. See :doc:`The Lorenz 63
model: what is it and why should we care? <lorenz-63-model>` or :doc:`What is
data assimilation? <introduction-ensemble-da>` for more information.

This sensitivity is of practical interest for verifying these results.
The initial conditions files and observations sequences are provided in
ASCII, which is portable across systems, but there may be some
machine-specific round-off error in the conversion from ASCII to machine
binary. As Lorenz 63 is such a nonlinear model, extremely small
differences in the initial conditions may eventually result in
noticeably different model trajectories. Even different compiler flags
may cause tiny differences that ultimately result in large differences.
Your results should start out looking VERY SIMILAR and may diverge with
time.

The simplest way to determine if the installation is successful is to
run some of the functions available in ``DART/diagnostics/matlab/``.
Usually, we launch MATLAB from the ``DART/models/lorenz_63/work`` directory.
Execute the following command in your terminal to navigate to this directory.

.. note:: The lines of code that are marked with a ``$`` symbol are commands that
          you will execute in your terminal. To execute a command, type it in
          exactly as seen, unless specified otherwise, and hit enter.

.. code-block:: bash

   $ cd DART/models/lorenz_63/work

In the case of this Lorenz model, we know the "true" (by definition)
state of the model that is consistent with the observations, which is
generated by running the *perfect_model_obs* program. We therefore must first
run *perfect_model_obs* before launching MATLAB and running our diagnostic
scripts. To do so, execute the following three commands in the terminal.

.. code-block:: bash

   $ csh quickbuild.csh
   $ ./filter
   $ ./perfect_model_obs

We are now ready to launch MATLAB. To execute the following command, replace
MATLABROOT with the directory that MATLAB is installed in on your computer. By
default, MATLAB is installed in the following locations:

.. code-block:: bash

   $ cd DART/models/lorenz_63/work
   Windows (64-bit):
   C:\Program Files\MATLAB\R20XXx (64-bit MATLAB)
   C:\Program Files (x86)\MATLAB\R20XXx (32-bit MATLAB)

   Windows (32-bit):
   C:\Program Files\MATLAB\R20XXx

   Linux:
   /usr/local/MATLAB/R20XXx
   Mac:
   /Applications/MATLAB_R20XXx.app

If these do not work, and you are still faced with the error ``command not
found: matlab``, you can identify your path by opening the MATLAB application
and using the ``matlabroot`` command.

.. code-block:: bash

   $  MATLABROOT/bin/matlab -nodesktop
   (Skipping startup messages)

Now that we have launched MATLAB, we will now use the MATLAB *addpath* command
to make the ``DART/matlab/`` functions available for execution in any working
directory.

.. code-block:: bash

     [matlab_prompt] addpath ../../../diagnostics/matlab

We will now run the diagnostics. The following MATLAB scripts (plot_total_err,
plot_ens_time_series, and perfect_model_obs) compare the ensemble members with
the truth and can calculate the error in the assimilation:

.. note:: When prompted to input file names while running the diagnostics, you
          can simply hit enter to select the default.

.. code-block:: bash

   [matlab_prompt] plot_total_err
   Input name of true model trajectory file;
   (cr) for perfect_output.nc
   perfect_output.nc
   Input name of ensemble trajectory file;
   (cr) for preassim.nc
   preassim.nc
   Comparing true_state.nc and
             preassim.nc
   [matlab_prompt] plot_ens_time_series
   Input name of ensemble trajectory file;
   (cr) for preassim.nc

   Comparing true_state.nc and
             preassim.nc
   Using Variable state IDs 1  2  3

   pinfo =

     struct with fields:

                    model: 'Lorenz_63'
                  def_var: 'state'
           num_state_vars: 1
               num_copies: 20
          num_ens_members: 20
         ensemble_indices: [1 2 3 ... 18 19 20]
            min_state_var: 1
            max_state_var: 3
           def_state_vars: [1 2 3]
                    fname: 'preassim.nc'
               truth_file: 'true_state.nc'
               diagn_file: 'preassim.nc'
               truth_time: [1 200]
               diagn_time: [1 200]
                     vars: {'state'}
                     time: [200x1 double]
       time_series_length: 200
                      var: 'state'
                 var_inds: [1 2 3]


|lorenz_63_total_err|
|lorenz_63_ens_time_series|

From the above ``plot_ens_time_series`` graphic, you can see the
individual green ensemble members becoming more constrained with less
spread as time evolves. If your figures look similar to these, you
should feel confident that everything is working as intended. Don’t miss
the opportunity to rotate the "butterfly" plot for that classic chaos
theory experience (perhaps while saying, "life, uh, finds a way").

Congratulations! You have now successfully configured DART and are ready
to begin the next phase of your interaction with DART. You may wish to
learn more about:

-  :doc:`What is data assimilation? <introduction-ensemble-da>` — a brief introduction to
   ensemble data assimilation. This section includes more information
   about the Lorenz 63 model and how to configure the ``input.nml`` file
   to play with DA experiments in DART using the Lorenz 63 model.
-  :doc:`What is DART? <what-is-dart>` — This section includes more
   information about DART and a basic flow chart of the overall DART
   workflow.
-  :doc:`How do I run DART with my model? <required-model-mod-routines>`
-  :doc:`How do I add my observations to DART? <adding-your-observations-to-dart>`
-  :doc:`How would I use DART for teaching students and/or
   myself? <../theory/readme>`
-  :doc:`How can I contribute to DART? <contributors-guide>`

.. note::

   In the case that the above instructions had one or more issues that either
   did not work for you as intended or were confusing, please contact the DART
   software development team at dart@ucar.edu. We value your input to make
   getting started as smooth as possible for new DART users!


.. |lorenz_63_total_err| image:: images/lorenz_63_total_err.png
   :width: 100%

.. |lorenz_63_ens_time_series| image:: images/lorenz_63_ens_time_series.png
   :width: 100%
