MODULE DEFAULT_obs_kind_mod
===========================

Overview
--------

DART provides capabilities to assimilate a multitude of different observation
types. Since most DA applications only need to assimilate a subset of the
observation types that DART is capable of assimilating, the observation types 
supported by the programs in your application are defined when you compile
them. You only need to include the observation types you are interested in.

``DEFAULT_obs_kind_mod.F90`` is the input template file which is read by the
:doc:`/assimilation_code/programs/preprocess/preprocess` to create
:doc:`obs_kind_mod`. Information from zero or more special obs_def modules
(such as :doc:`/observations/forward_operators/obs_def_1d_state_mod`) are
incorporated into the template provided by DEFAULT_obs_def_kind.

If you don't include any specific obs_def files in the preprocessor namelist, 
``preprocess`` will create a minimal ``obs_kind_mod.f90`` file which can only
support identity forward observation operators.

To add a new specific observation type, see the
:doc:`../../../observations/forward_operators/obs_def_mod` documentation. If
adding this type includes defining a new generic observation quantity, then the
quantity must be added to the table in this file, with a unique integer value
defined for it. The new value(s) must also be added to the string-to-number
section in the ``initialize_module()`` routine below.

.. note::
   
   In a planned future update to the ``preprocess`` program it is expected that
   this quantities table will become autogenerated, much like the types table
   described below, so no editing of this file will be needed. But until then,
   quantities must be added by here, by hand. The quantities must be added to
   the template file, ``DEFAULT_obs_kind_mod.F90`` and not the output of the
   preprocess program, ``obs_kind_mod.f90``. Since ``obs_kind_mod.f90`` is
   overwritten each time ``preprocess`` runs, any changes made to
   ``obs_kind_mod.f90`` are erased.

The remainder of this document describes the special formatting that is
included in the ``DEFAULT_obs_kind_mod`` in order to guide the preprocess
program. Two sections of code are inserted into the ``DEFAULT_obs_def`` module
from each of the special ``obs_def`` modules that are requested. The insertion
point for each section is denoted by a special comment line that must be
included VERBATIM in ``DEFAULT_obs_kind_mod``.

There are two special comment lines, each of which are explained in detail
below.

Integer declaration
^^^^^^^^^^^^^^^^^^^

At the comment line:

.. code-block:: fortran

   ! DART PREPROCESS INTEGER DECLARATION INSERTED HERE

each of the observation type identifiers are inserted, and are given both the
``parameter`` and ``public`` attributes.

The associated integer values are generated sequentially, starting at 1. If a
different set of special obs_def modules is specified via the namelist for 
``preprocess``, the integer value associated with a given observation type
could change so these integers are for use internal to a given program
execution only.

Observation types are permanently and uniquely identified by a string with
character values identical to the integer identifier here. In other words, an
observation quantity with integer parameter identifier RAW_STATE_VARIABLE will
always be associated with a string "RAW_STATE_VARIABLE", as explained below.

preprocess OBS_QTY_INFO
^^^^^^^^^^^^^^^^^^^^^^^

At the comment line:

.. code-block:: fortran

   ! DART PREPROCESS OBS_QTY_INFO INSERTED HERE

the entries for the obs_kind_info table are initialized. This table has a row
for each observation quantity defined in the public and integer parameter
declarations discussed above. For each obs_kind, the obs_kind info table 
contains the following information:

#. The integer index associated with this observation quantity. This is the
   value that is defined in the integer parameter statement above.
#. A character string with maximum length 32 characters that uniquely
   identifies the observation quantity. This string is identical to the F90
   identifier used in the integer parameter statements created above.
#. A generic variable quantity referenced by an integer. The obs_kind_mod
   contains a table that defines an integer parameter that uniquely identifies
   each generic observation quantity. Generic quantities can be associated with
   both a model state variable or an observation quantity. For instance, the
   generic quantity ``QTY_U_WIND_COMPONENT`` might be associated with model
   ``U`` state variables, with ``RADIOSONDE_U_WIND_COMPONENT`` observation
   types, and with ``ACARS_U_WIND_COMPONENT`` observation types. The
   distinction between generic quantites and observation types is important and
   potentially confusing, so be careful to understand this point.
#. A logical variable indicating whether observations of this type are to be
   assimilated in the current experiment. This variable is set from the 
   ``obs_kind`` namelist. For more information, see :doc:`obs_kind_mod`. The
   default value here is false when the ``obs_def_mod`` is created by the 
   :doc:`/assimilation_code/programs/preprocess/preprocess`.
#. A logical variable indicating whether observations of this type are to be
   evaluated (forward operator computed and recorded) but not assimilated
   (again set by namelist). The default value here is ``.false .`` when the
   ``obs_def_mod`` is created by the :doc:`/assimilation_code/programs/preprocess/preprocess`.
#. A logical variable indicating whether observations of this type should use
   precomputed forward operator values in the observation sequence file. The
   default value here is false when the ``obs_def_mod`` is created by the 
   :doc:`/assimilation_code/programs/preprocess/preprocess`.
