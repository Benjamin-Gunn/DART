&perfect_model_obs_nml
   read_input_state_from_file = .true.,
   single_file_in             = .false.
   input_state_files          = 'wrfinput_d01', 'wrfinput_d02'

   write_output_state_to_file = .true.,
   single_file_out            = .false.
   output_state_files         = 'perfect_output_d01.nc', 'perfect_output_d02.nc'
   output_interval            = 1,

   async                      = 0,
   adv_ens_command            = './advance_model.csh',

   obs_seq_in_file_name       = 'obs_seq.in',
   obs_seq_out_file_name      = 'obs_seq.out',
   init_time_days             = -1,
   init_time_seconds          = -1,
   first_obs_days             = -1,
   first_obs_seconds          = -1,
   last_obs_days              = -1,
   last_obs_seconds           = -1,

   trace_execution            = .false.,
   output_timestamps          = .false.,
   print_every_nth_obs        = -1,
   output_forward_op_errors   = .false.,
   silence                    = .false.,
   /

obs_seq.one.out

&filter_nml
   async                    = 0,
   adv_ens_command          = "../shell_scripts/advance_model.csh",
   ens_size                 = 3,
   obs_sequence_in_name     = "obs_seq.out",
   obs_sequence_out_name    = "obs_seq.final",
   input_state_file_list    = "input_list.txt"
   output_state_file_list   = "output_list.txt"
   init_time_days           = -1,
   init_time_seconds        = -1,
   first_obs_days           = -1,
   first_obs_seconds        = -1,
   last_obs_days            = -1,
   last_obs_seconds         = -1,
   num_output_state_members = 0,
   num_output_obs_members   = 32,
   output_interval          = 1,
   num_groups               = 1,
   distributed_state        = .true.
   compute_posterior        = .true.
   output_forward_op_errors = .false.,
   output_timestamps        = .false.,
   trace_execution          = .false.,

   stages_to_write          = 'preassim', 'output'
   output_members           = .false.
   output_mean              = .true.
   output_sd                = .false.
   write_all_stages_at_end  = .false.

   inf_flavor                  = 2,                      0,
   inf_initial_from_restart    = .true.,                 .false.,
   inf_sd_initial_from_restart = .true.,                 .false.,
   inf_initial                 = 1.0,                     1.00,
   inf_lower_bound             = 1.0,                     1.0,
   inf_upper_bound             = 1000000.0,               1000000.0,
   inf_damping                 = 0.9,                     1.0,
   inf_sd_initial              = 0.6,                     0.0,
   inf_sd_lower_bound          = 0.6,                     0.0,
   inf_sd_max_change           = 1.05,                    1.05,
   /

&quality_control_nml
   input_qc_threshold          = 3.0,
   outlier_threshold           = 3.0,
   enable_special_outlier_code = .false.
   /

&fill_inflation_restart_nml
   write_prior_inf = .true.
   prior_inf_mean  = 1.00
   prior_inf_sd    = 0.6

   write_post_inf  = .false.
   post_inf_mean   = 1.00
   post_inf_sd     = 0.6

   input_state_files = 'wrfinput_d01', 'wrfinput_d02'
   single_file       = .false.
   verbose           = .false.
   /

&smoother_nml
   num_lags              = 0
   start_from_restart    = .false.
   output_restart        = .false.
   restart_in_file_name  = 'smoother_ics'
   restart_out_file_name = 'smoother_restart' /

&assim_tools_nml
   filter_kind                     = 1,
   cutoff                          = 0.16,
   sort_obs_inc                    = .false.,
   spread_restoration              = .false.,
   sampling_error_correction       = .false.,
   print_every_nth_obs             = 1000,
   adaptive_localization_threshold = -1 /

&cov_cutoff_nml
   select_localization             = 1  /

&assim_model_nml
/

&location_nml
   horiz_dist_only                 = .false.,
   vert_normalization_pressure     = 187500.0
   vert_normalization_height       = 5000000.0,
   vert_normalization_level        = 2666.7,
   approximate_distance            = .false.,
   nlon                            = 141,
   nlat = 72  /

   #vert_normalization_scale_height = 5.0,

# Notes for model_nml:
# (1) vert_localization_coord must be one of:
#     1 = model level
#     2 = pressure
#     3 = height
#     4 = scale height

# set default_state_variables to .false. to use the explicit list.
# otherwise it uses a hardcoded default list: U, V, W, PH, T, MU, QV only.
# see ../wrf_state_variables_table for a full list of what wrf fields are
# supported in the DART state vector, and what settings should be used here.
# 'UPDATE' and 'NO_COPY_BACK' are supported in the 4th column; 'NO_UPDATE' is
# not yet supported.

&model_nml
   default_state_variables = .false.,
   wrf_state_variables = 'U',     'QTY_U_WIND_COMPONENT',     'TYPE_U',    'UPDATE','999',
                         'V',     'QTY_V_WIND_COMPONENT',     'TYPE_V',    'UPDATE','999',
                         'W',     'QTY_VERTICAL_VELOCITY',    'TYPE_W',    'UPDATE','999',
                         'PH',    'QTY_GEOPOTENTIAL_HEIGHT',  'TYPE_GZ',   'UPDATE','999',
                         'T',     'QTY_POTENTIAL_TEMPERATURE','TYPE_T',    'UPDATE','999',
                         'MU',    'QTY_PRESSURE',             'TYPE_MU',   'UPDATE','999',
                         'QVAPOR','QTY_VAPOR_MIXING_RATIO',   'TYPE_QV',   'UPDATE','999',
                         'PSFC',  'QTY_SURFACE_PRESSURE',     'TYPE_PSFC', 'UPDATE','999',
   wrf_state_bounds    = 'QVAPOR','0.0','NULL','CLAMP',
                         'QRAIN', '0.0','NULL','CLAMP',
                         'QCLOUD','0.0','NULL','CLAMP',
   num_domains                 = 1,
   calendar_type               = 3,
   assimilation_period_seconds = 21600,
   vert_localization_coord     = 3,
   center_search_half_length   = 500000.,
   center_spline_grid_scale    = 10,
   sfc_elev_max_diff           = -1.0,
   circulation_pres_level      = 80000.0,
   circulation_radius          = 108000.0,
   allow_obs_below_vol         = .false.
   /

&utilities_nml
   TERMLEVEL                   = 1,
   logfilename                 = 'dart_log.out',
   nmlfilename                 = 'dart_log.nml',
   write_nml                   = 'file',
   module_details              = .false.  
   /

&mpi_utilities_nml
   reverse_task_layout = .true.
   /

&reg_factor_nml
   select_regression           = 1,
   input_reg_file              = "time_mean_reg",
   save_reg_diagnostics        = .false.,
   reg_diagnostics_file        = 'reg_diagnostics'  /

&obs_sequence_nml
   write_binary_obs_sequence   = .false.  /

&preprocess_nml
   input_obs_kind_mod_file  = '../../../assimilation_code/modules/observations/DEFAULT_obs_kind_mod.F90',
   output_obs_kind_mod_file = '../../../assimilation_code/modules/observationsd_mod.f90',
   input_obs_def_mod_file   = '../../../observations/forward_operators/DEFAULT_obs_def_mod.F90',
   output_obs_def_mod_file  = '../../../observations/forward_operators/obs_def_mod.f90',
   input_files              = '../../../observations/forward_operators/obs_def_rttov_mod.f90',
   /
                              '../../../observations/forward_operators/obs_def_altimeter_mod.f90',
                              '../../../observations/forward_operators/obs_def_radar_mod.f90',
                              '../../../observations/forward_operators/obs_def_reanalysis_bufr_mod.f90',
                              '../../../observations/forward_operators/obs_def_metar_mod.f90'
                              '../../../observations/forward_operators/obs_def_dew_point_mod.f90',
                              '../../../observations/forward_operators/obs_def_gps_mod.f90',
                              '../../../observations/forward_operators/obs_def_gts_mod.f90',
                              '../../../observations/forward_operators/obs_def_vortex_mod.f90'  
                              '../../../observations/forward_operators/obs_def_QuikSCAT_mod.f90',

#   assimilate_these_obs_types = 'LAND_SFC_PRESSURE'

&obs_def_tpw_nml
   /

# The times in the namelist for the obs_diag program are vectors
# that follow the following sequence:
# year   month   day   hour   minute   second
# max_num_bins can be used to specify a fixed number of bins,
# in which case last_bin_center should be safely in the future.
#
# Acceptable latitudes range from  [-90,  90]
# Acceptable longitudes range from [  0, 360]

&obs_diag_nml
   obs_sequence_name          = 'obs_seq.final',
   first_bin_center =  2007, 4, 26, 00, 0, 0 ,
   last_bin_center  =  2007, 4, 27, 00, 0, 0 ,
   bin_separation             =     0, 0, 0, 6, 0, 0 ,
   bin_width                  =     0, 0, 0, 6, 0, 0 ,
   time_to_skip               =     0, 0, 0, 0, 0, 0 ,
   max_num_bins               = 1000,
   rat_cri                    = 5000.0,
   lonlim1    = 0.0,
   lonlim2    = 360.0,
   latlim1    = -89.0,
   latlim2    =  89.0, 
   reg_names  = 'Full Domain',
   print_mismatched_locs      = .false.,
   print_obs_locations        = .false.,
   verbose                    = .false.  /

&merge_obs_seq_nml
   num_input_files = 2,
   filename_seq    = 'obs_seq.new_1', 'obs_seq.new_2'
   filename_out    = 'obs_seq.final'   /

&obs_sequence_tool_nml
   num_input_files    = 1,
   filename_seq       = 'obs_seq20070425',
   filename_out       = 'obs_seq.out',
   print_only         =  .false.,
   first_obs_days     = 148402,
   first_obs_seconds  = 75601,
   last_obs_days      = 148403,
   last_obs_seconds   = 10800,
   gregorian_cal      = .true.
 /

&schedule_nml
   calendar        = 'Gregorian',  
   first_bin_start =  2007, 4, 25,21, 0, 0 ,
   first_bin_end   =  2007, 4, 26, 3, 0, 0 ,
   last_bin_end    =  2007, 4, 26, 3, 0, 0 ,
   bin_interval_days    = 0,
   bin_interval_seconds = 21600,   
   max_num_bins         = 1000,    
   print_table          = .true.,  
   /
   
&obs_seq_to_netcdf_nml             
   obs_sequence_name = 'obs_seq.final',
   obs_sequence_list = '',
   append_to_netcdf  = .false.,
   lonlim1    =    0.0,
   lonlim2    =  360.0,        
   latlim1    =  -90.0,        
   latlim2    =   90.0,        
   verbose    = .false.,       
   /                           
                               
&state_vector_io_nml
   single_precision_output    = .true.,
   /

&compare_states_nml
   /

&closest_member_tool_nml 
   input_restart_file_list   = 'input_file_list_d01.txt',
   output_file_name          = 'closest_results.txt'
   ens_size                  = 3,
   single_restart_file_in    = .false.,
   difference_method         = 4,
   use_only_qtys             = 'QTY_U_WIND_COMPONENT'
   /

&state_space_diag_nml
  single_file           = .true.
  make_diagnostic_files = .true.
/

&model_mod_check_nml
   input_state_files     = 'wrfinput_d01', 'wrfinput_d02'
   output_state_files    = 'mmc_output1.nc', 'mmc_output2.nc'
   test1thru             = 0
   run_tests             = 1,2,3,4,5
   x_ind                 = 87370
   loc_of_interest       = 231.0, 40.0, 10.0
   quantity_of_interest  = 'QTY_U_WIND_COMPONENT'
   interp_test_dlon      = 0.1
   interp_test_dlat      = 0.1
   interp_test_dvert     = 1000.0
   interp_test_lonrange  = 250.0,  260.0
   interp_test_latrange  =  30.0,   45.0
   interp_test_vertrange = 2000.0, 4000.0
   interp_test_vertcoord = 'VERTISHEIGHT'
   verbose               = .false.
   /

   coef_filename = 'rtcoef_noaa_16_avhrr.dat'

&obs_def_rttov_nml
   coef_filename = 'rtcoef_eos_2_amsua.dat'
   nprof = 1
   dosolar = 0
   nlevels = 28
   nchannels = 3
   channel_list = 1,2,3
   nthreads = 1
   /
